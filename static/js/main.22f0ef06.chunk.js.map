{"version":3,"sources":["components/Home/GameItem/GameItem.tsx","components/Pagination/Pagination.tsx","components/Home/Home.tsx","components/Game/Game.tsx","components/Search/SearchGameItem/SearchGameItem.tsx","components/Search/Search.tsx","components/Header/SearchBox/SearchBox.tsx","components/Header/Header.tsx","Routes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GameItem","games","loading","className","map","game","key","id","to","src","cover","url","replace","alt","Pagination","gamesPerPage","totalGames","paginate","pageNumbers","i","Math","ceil","push","number","onClick","Home","useState","setGames","setLoading","currentPage","setCurrentPage","defaultGames","useEffect","getAccessToken","a","fetch","process","REACT_APP_CLIENT_ID","REACT_APP_CLIENT_SECRET","method","then","res","json","data","localStorage","setItem","JSON","stringify","access_token","queryGames","token","getItem","slice","axios","headers","getGames","list","parse","response","indexOfLastGame","indexOfFirstGame","currentGames","length","pageNumber","Game","match","setGame","params","fetchGame","getNames","field","names","x","name","toString","addToStorage","gameList","index","forEach","item","genres","platforms","summary","SearchGameItem","Search","query","newArray","sort","b","localeCompare","catch","err","console","error","SearchBox","setQuery","history","useHistory","type","placeholder","onChange","e","target","value","onKeyDown","preventDefault","submit","Header","Routes","basename","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.22f0ef06.chunk.js","sourcesContent":["import React from \"react\";\nimport { Games } from \"../../../models/Games\";\nimport { Link } from \"react-router-dom\";\nimport \"./GameItem.css\";\n\ninterface GameItemProps {\n  games: Games[];\n  loading: boolean;\n}\n\nexport const GameItem: React.FC<GameItemProps> = ({ games, loading }) => {\n  if (loading) {\n    return <h2>Loading...</h2>;\n  }\n  return (\n    <div className=\"games\">\n      {games.map((game: Games) => (\n        <div className=\"game-item\" key={game.id}>\n          <Link to={`/game/${game.id}`}>\n            <img\n              src={game.cover.url.replace(\"t_thumb\", \"t_cover_big\")}\n              alt=\"\"\n            />\n          </Link>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\n//credits to Traversy Media https://www.youtube.com/watch?v=IYCa1F-OWmk\n\ninterface PaginationProps {\n  gamesPerPage: number;\n  totalGames: number;\n  paginate: (pageNumber: number) => void;\n}\n\nexport const Pagination: React.FC<PaginationProps> = ({\n  gamesPerPage,\n  totalGames,\n  paginate,\n}) => {\n  const pageNumbers = [];\n  for (let i = 1; i <= Math.ceil(totalGames / gamesPerPage); i++) {\n    pageNumbers.push(i);\n  }\n  return (\n    <div>\n      <ul className=\"pagination\">\n        {pageNumbers.map((number: number) => (\n          <li key={number} className=\"page-item\">\n            <button className=\"page-link\" onClick={() => paginate(number)}>\n              {number}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport { Games } from \"../../models/Games\";\nimport { GameItem } from \"./GameItem/GameItem\";\nimport { Pagination } from \"../Pagination/Pagination\";\nimport \"./Home.css\";\n\nexport const Home: React.FC = () => {\n  const [games, setGames] = useState<Array<Games>>([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [gamesPerPage] = useState(8);\n  const [defaultGames] = useState([\n    115,\n    114283,\n    1443,\n    76816,\n    40477,\n    26845,\n    24220,\n    7323,\n    37777,\n    1164,\n    9740,\n    9498,\n    11169,\n    2449,\n    359,\n    384,\n    389,\n    1121,\n    19441,\n    1520,\n    19131,\n    23441,\n    115989,\n    23865,\n  ]);\n  \n\n  useEffect(() => {\n    const getAccessToken = async () => {\n      await fetch(`https://cors-anywhere.herokuapp.com/https://id.twitch.tv/oauth2/token?client_id=${process.env.REACT_APP_CLIENT_ID}&client_secret=${process.env.REACT_APP_CLIENT_SECRET}&grant_type=client_credentials`,\n      {\n        method: \"POST\"\n      }).then(async (res)=>{\n        const data = await res.json();\n        localStorage.setItem('accessToken', JSON.stringify(data.access_token));\n      })\n    }\n    \n    const queryGames = async()=>{\n      const token = localStorage.getItem('accessToken')?.slice(1,-1);\n      const res = await axios({\n        url: 'https://cors-anywhere.herokuapp.com/https://api.igdb.com/v4/games',\n        method: \"POST\",\n        headers: {\n          \"Client-ID\": `${process.env.REACT_APP_CLIENT_ID}`,\n          'Accept': 'application/json',\n          \"Authorization\": `Bearer ${token}`,\n        },\n        data: `fields name,cover.url,summary,platforms.name,genres.name;limit 50;where id=(${defaultGames});`,\n      }\n    )\n    return res.data;\n    }\n\n    const getGames = ()=>{\n      const list = localStorage.getItem(\"gameList\");\n      if(!list) {\n        queryGames()\n        .then(async (res)=>{\n          setLoading(true);\n          const response = await res;\n          setGames(response);\n          setLoading(false);\n        });\n      } else {\n        setGames(JSON.parse(list));\n      }\n    }\n    const accessToken = localStorage.getItem(\"accessToken\");\n    if(!accessToken){\n      getAccessToken()\n        .then(()=>{\n          getGames();\n      })\n    }\n    else{\n      getGames();\n    }\n  }, [defaultGames]);\n\n  const indexOfLastGame = currentPage * gamesPerPage;\n  const indexOfFirstGame = indexOfLastGame - gamesPerPage;\n  const currentGames = games?.slice(indexOfFirstGame, indexOfLastGame);\n\n  const paginate = (pageNumber: number) => {\n    setCurrentPage(pageNumber);\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"home-container\">\n        <GameItem games={currentGames} loading={loading} />\n        <div className=\"pagination\">\n          <Pagination\n            gamesPerPage={gamesPerPage}\n            totalGames={games.length}\n            paginate={paginate}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport \"./Game.css\";\nimport { Games } from \"../../models/Games\";\nimport axios from \"axios\";\n\ninterface GameProps extends RouteComponentProps<{ id: string }> {}\n\nexport const Game: React.FC<GameProps> = ({ match }) => {\n  const [game, setGame] = useState<Array<Games>>([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchGame = async () => {\n      const token = localStorage.getItem('accessToken')?.slice(1,-1);\n      const res = await axios({\n        url: `https://cors-anywhere.herokuapp.com/https://api.igdb.com/v4/games/`,\n        method: 'POST',\n        headers: {\n          \"Client-ID\": `${process.env.REACT_APP_CLIENT_ID}`,\n          'Accept': 'application/json',\n          \"Authorization\": `Bearer ${token}`,\n        },\n        data: `fields name,cover.url,summary,platforms.name,genres.name;where id=(${match.params.id});`,\n      });\n      return res.data;\n    }\n    fetchGame()\n    .then(async (res) => {\n      setLoading(true);\n      const response = await res;\n      setGame(response);\n      setLoading(false);\n    });\n  }, [match.params.id]);\n\n  const getNames = (field: Array<Object>) => {\n    const names: string[] = [];\n    field.map((x: any) => names.push(x.name));\n    return names.toString().replace(/,/g, \", \");\n  };\n\n  const addToStorage = () => {\n    const list = localStorage.getItem(\"gameList\");\n    if (!list) {\n      const gameList: any = [];\n      gameList.push({ ...game[0] });\n      localStorage.setItem(\"gameList\", JSON.stringify(gameList));\n    } else {\n      const gameList: any = JSON.parse(list);\n      let index: number = -1;\n      gameList.forEach((item: any, i: number) => {\n        if (item.id === game[0].id) {\n          index = i;\n        }\n      });\n      if (index === -1) {\n        gameList.push({ ...game[0] });\n        localStorage.setItem(\"gameList\", JSON.stringify(gameList));\n      }\n    }\n  };\n\n  if (loading) {\n    return <h2>Loading...</h2>;\n  }\n  return (\n    <div>\n      {game.map((game: Games) => (\n        <div className=\"game-container\" key={game.id}>\n          <div className=\"game-image\">\n            <img\n              src={game.cover.url.replace(\"t_thumb\", \"t_cover_big\")}\n              alt=\"\"\n            />\n          </div>\n          <div className=\"game-descriptions\">\n            <div className=\"game-name\">\n              <h3>{game.name}</h3>\n            </div>\n            <div className=\"game-genres\">\n              <b>Genres: </b>\n              {getNames(game.genres)}\n            </div>\n            <div className=\"game-platforms\">\n              <b>Platforms: </b>\n              {getNames(game.platforms)}\n            </div>\n            <div className=\"game-summary\">\n              <b>Summary: </b>\n              <p>{game.summary}</p>\n            </div>\n            <button className=\"game-add-button\" onClick={addToStorage}>\n              Add\n            </button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Games } from \"../../../models/Games\";\nimport { Link } from \"react-router-dom\";\nimport \"./SearchGameItem.css\";\n\ninterface SearchGameItemProps {\n  games: Games[];\n  loading: boolean;\n}\n\nexport const SearchGameItem: React.FC<SearchGameItemProps> = ({\n  games,\n  loading,\n}) => {\n  if (loading) {\n    return <h2>Loading...</h2>;\n  }\n  const getNames = (field: Array<Object>) => {\n    const names: string[] = [];\n    field.map((x: any) => names.push(x.name));\n    return names.toString().replace(/,/g, \", \");\n  };\n  return (\n    <div>\n      {games.map((game: Games) => (\n        <div className=\"searched-games\" key={game.id}>\n          <div className=\"searched-game-image\">\n            <img\n              src={game.cover.url.replace(\"t_thumb\", \"t_cover_small\")}\n              alt=\"\"\n            />\n          </div>\n          <div className=\"searched-game-description\">\n            <Link to={`/game/${game.id}`}>{game.name}</Link>\n            <p>{getNames(game.platforms)}</p>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Games } from \"../../models/Games\";\nimport { Pagination } from \"../Pagination/Pagination\";\nimport { SearchGameItem } from \"./SearchGameItem/SearchGameItem\";\nimport \"./Search.css\";\n\ninterface SearchProps extends RouteComponentProps<{ query: string }> {}\n\nexport const Search: React.FC<SearchProps> = ({ match }) => {\n  const [games, setGames] = useState<Array<Games>>([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [gamesPerPage] = useState(6);\n\n  useEffect(() => {\n    const token = localStorage.getItem('accessToken')?.slice(1,-1);\n    fetch(\n      `https://cors-anywhere.herokuapp.com/https://api.igdb.com/v4/games/?search=${match.params.query}&fields=name,cover.url,summary,platforms.name,genres.name&limit=50`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Client-ID\": `${process.env.REACT_APP_CLIENT_ID}`,\n          'Accept': 'application/json',\n          \"Authorization\": `Bearer ${token}`,\n        },\n      }\n    )\n      .then(async (res) => {\n        setLoading(true);\n        const response = await res.json();\n        const newArray: any[] = [];\n        response.forEach((game: any) => {\n          if (game.cover && game.genres && game.platforms && game.summary) {\n            newArray.push(game);\n          }\n        });\n        newArray.sort((a, b) => a.name.localeCompare(b.name));\n        setGames(newArray);\n        setLoading(false);\n      })\n      .catch((err) => console.error(err));\n  }, [match.params.query]);\n\n  const indexOfLastGame = currentPage * gamesPerPage;\n  const indexOfFirstGame = indexOfLastGame - gamesPerPage;\n  const currentGames = games?.slice(indexOfFirstGame, indexOfLastGame);\n\n  const paginate = (pageNumber: number) => {\n    setCurrentPage(pageNumber);\n  };\n\n  return (\n    <div className=\"search-container\">\n      <SearchGameItem games={currentGames} loading={loading} />\n      <div className=\"pagination\">\n        <Pagination\n          gamesPerPage={gamesPerPage}\n          totalGames={games.length}\n          paginate={paginate}\n        />\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./SearchBox.css\";\n\nexport const SearchBox: React.FC = () => {\n  const [query, setQuery] = useState(\"\");\n  const history = useHistory();\n\n  const submit = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      history.push(`/search/${query}`);\n      setQuery(\"\");\n    }\n  };\n  return (\n    <input\n      type=\"text\"\n      className=\"searchbox\"\n      placeholder=\"Search your favorite game!\"\n      onChange={(e) => setQuery(e.target.value)}\n      onKeyDown={(e) => submit(e)}\n    />\n  );\n};\n","import React from \"react\";\nimport { SearchBox } from \"./SearchBox/SearchBox\";\nimport { Link } from \"react-router-dom\";\nimport \"./Header.css\";\n\nexport const Header: React.FC = () => {\n  return (\n    <nav>\n      <ul>\n        <li>\n          <Link className=\"home\" to=\"/\">\n            Game List App\n          </Link>\n        </li>\n        <li className=\"search-box\">\n          <SearchBox />\n        </li>\n      </ul>\n    </nav>\n  );\n};\n","import React from \"react\";\nimport { Switch, Route, HashRouter } from \"react-router-dom\";\nimport { Home } from \"./components/Home/Home\";\nimport { Game } from \"./components/Game/Game\";\nimport { Search } from \"./components/Search/Search\";\nimport { Header } from \"./components/Header/Header\";\n\nexport const Routes: React.FC = () => {\n  return (\n    <HashRouter basename=\"/\">\n      <div>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/game/:id\" component={Game} />\n          <Route exact path=\"/search/:query\" component={Search} />\n        </Switch>\n      </div>\n    </HashRouter>\n  );\n};\n","import React from \"react\";\nimport { Routes } from \"./Routes\";\n\nfunction App() {\n  return <Routes />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}